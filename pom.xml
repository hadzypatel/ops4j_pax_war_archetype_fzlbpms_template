<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">



	<modelVersion>4.0.0</modelVersion>
	<groupId>br.edu.fzlbpms.template</groupId>
	<artifactId>ops4j_pax_war_archetype_fzlbpms_template</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>ops4j_pax_war_archetype_fzlbpms_template</name>
	<description>ops4j_pax_war_archetype_fzlbpms_template war</description>


	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>


		<!-- plugins properties -->
		<maven-bundle-plugin.version>2.3.4</maven-bundle-plugin.version>
		<maven-war-plugin.version>2.1.1</maven-war-plugin.version>
		<maven-surefire-plugin-version>2.12</maven-surefire-plugin-version>




		<!-- dependencies properties -->
		<servlet-api.version>2.5</servlet-api.version>
		<dwr.version>3.0.M1</dwr.version>
		<jetty.version>6.1.10</jetty.version>




		<!-- fzlbpms plataform paths (at linux mounted partition) -->

		<!-- with new fedora -->
		<fzl_home>/run/media/wagner/fzlbpms_env/PROGSATIVOS/fzlbpms</fzl_home>
		
		<!-- with traditional linux 
		<fzl_home>/media/fzlbpms_env/PROGSATIVOS/fzlbpms</fzl_home>
		-->
		<smx4_home>${fzl_home}/integrated/apache-servicemix-4.4.1-fuse-07-11</smx4_home>
		<smx4_deploy_folder>${smx4_home}/deploy</smx4_deploy_folder>
				
		
		
		
		<!--		
			dojo app build parameters			
		
		<dojo.version>1.8.0rc1</dojo.version>
		-->
		<dojo.version>1.8.0b1</dojo.version>
		
		<!-- root dir of all js code -->
		<dojo.app.baseUrl>${project.basedir}/src/main/webapp/resources/js</dojo.app.baseUrl>
		
		<!-- does not run buil.sh (the dojo app build script)
		build dojo app is needed? not aways, maybe...
		valid values is true or false
		-->
		<dojo.app.skip_build>true</dojo.app.skip_build>
		
		<!-- valid values are rhino and node
			 default is node
			 any other value will be tranformed to "rhino"
			 
			 dojo build documentation:
			 http://livedocs.dojotoolkit.org/build/buildSystem
		-->
		<dojo.app.use_rhino_or_node>node</dojo.app.use_rhino_or_node>
		
		<!-- selenium temp notes 
		from http://seleniumhq.org/download/maven.html
		WebDriver implemenations like ChromeDriver, HtmlUnitDriver, FirefoxDriver, or InternetExplorerDriver
		 
		-->
		
		
	</properties>
	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api.version}</version>
		</dependency>

		<!-- DRW -->
		<dependency>
			<groupId>org.directwebremoting</groupId>
			<artifactId>dwr</artifactId>
			<version>${dwr.version}</version>
			<exclusions>
        		<exclusion> 
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>				        
				</exclusion>
        		<exclusion> 
					<groupId>com.google.code.guice</groupId>
					<artifactId>guice</artifactId>				        
				</exclusion>				
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.0.4</version>
		</dependency>
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2</version>
		</dependency>
		
		<!-- http://team.ops4j.org/wiki/display/ops4j/Guice-OSGi --> 		
		<dependency>
  			<groupId>org.testng</groupId>
  			<artifactId>testng</artifactId>
  			<version>6.1.1</version>	     
  			<scope>test</scope>
		</dependency>
		
	
		
	<!-- 
		<dependency>
        	<groupId>org.seleniumhq.selenium</groupId>
        	<artifactId>selenium-java</artifactId>
        	<version>2.24.1</version>        	
    	</dependency>
    	<dependency>
        	<groupId>org.seleniumhq.selenium</groupId>
        	<artifactId>selenium-server</artifactId>
        	<version>2.24.1</version>
        	<exclusions>
        		<exclusion> 
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>				        
				</exclusion>
			</exclusions>	
    	</dependency>
    	 -->    
	</dependencies>
	
	
	<build>
		<finalName>ops4j_pax_war_archetype_fzlbpms_template</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/test/resources </directory>
			</resource>
		</resources>
		
		<sourceDirectory>${basedir}/src/main/java</sourceDirectory>
    	<scriptSourceDirectory>${basedir}/src/main/scripts</scriptSourceDirectory>
    	<testSourceDirectory>${basedir}/src/test/java</testSourceDirectory>
    	<outputDirectory>${basedir}/target/classes</outputDirectory>
    	<testOutputDirectory>${basedir}/target/test-classes</testOutputDirectory>
		
		<plugins>

			<!-- tooling dojo app integration

			wagon-maven-plugin
			to download dojo based on ${dojo.version}

			maven-antrun-plugin
			to untar dojo sdk
			to copy dojo, dijit, dojox and util folders baseurl from dojo unpacked to the project folders
			to run build.sh

			Note:
			if sdk is present, <skip>true</skip> skip the download procedure
			-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>wagon-maven-plugin</artifactId>
				<version>1.0-beta-4</version>
				<executions>
					<execution>
						<id>download-dojo</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>download-single</goal>
						</goals>
						<configuration>
							<skip>true</skip>
							<serverId>dojotoolkit</serverId>
							<url>http://download.dojotoolkit.org/release-${dojo.version}</url>
								<!-- fromFile>dojo-release-${dojo.version}.tar.gz</fromFile -->
							<fromFile>dojo-release-${dojo.version}-src.tar.gz</fromFile>
							<toDir>${project.basedir}</toDir>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
				<executions>
					<execution>
						<id>building_dojo</id>
						<configuration>
						    <skip>true</skip>
							<tasks>
								<untar compression="gzip"
								src="${project.basedir}/dojo-release-${dojo.version}-src.tar.gz"
								dest="${project.build.directory}"/>
								<copy  todir="${dojo.app.baseUrl}/dojo" >
									<fileset dir="${project.build.directory}/dojo-release-${dojo.version}-src/dojo" includes="**"/>
								</copy>
								<copy  todir="${dojo.app.baseUrl}/dijit" >
									<fileset dir="${project.build.directory}/dojo-release-${dojo.version}-src/dijit" includes="**"/>
								</copy>
								<copy  todir="${dojo.app.baseUrl}/dojox" >
									<fileset dir="${project.build.directory}/dojo-release-${dojo.version}-src/dojox" includes="**"/>
								</copy>
								<copy  todir="${dojo.app.baseUrl}/util" >
									<fileset dir="${project.build.directory}/dojo-release-${dojo.version}-src/util" includes="**"/>
								</copy>
								<exec
									executable="${project.basedir}/build.sh" failonerror="false">
									<arg line="${dojo.app.skip_build} ${dojo.app.use_rhino_or_node}"/>
								</exec>

							</tasks>
						</configuration>						
						<phase>generate-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<execution>
						<id>cleaning_dojo_app_dist</id>
						<configuration>
							<tasks>

								<delete>
									<fileset dir="${dojo.app.baseUrl}/dist" includes="**"/>
								</delete>
								<delete>
									<fileset dir="${dojo.app.baseUrl}/dojo" includes="**"/>
								</delete>
								<delete>
									<fileset dir="${dojo.app.baseUrl}/dijit" includes="**"/>
								</delete>
								<delete>
									<fileset dir="${dojo.app.baseUrl}/dojox" includes="**"/>
								</delete>
								<delete >
									<fileset dir="${dojo.app.baseUrl}/util" includes="**"/>
								</delete>

							</tasks>
						</configuration>
						<phase>clean</phase>
						<!-- phase>pre-integration-test</phase -->
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
					<execution>
						<id>deploy_on_smx4</id>
						<configuration>
							<tasks>							
								<echo message="coping ${project.build.directory}/${project.build.finalName}.* to dir ${smx4_deploy_folder}"/>
								<copy  todir="${smx4_deploy_folder}" >
									<fileset dir="${project.build.directory}" includes="${project.build.finalName}.*"/>
								</copy>
							</tasks>
						</configuration>						
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>					
				</executions>
			</plugin>

			<!-- bundle tooling -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<executions>
					<execution>
						<id>bundle-manifest</id>
						<phase>process-sources</phase>
						<goals>
							<goal>manifest</goal>
						</goals>
						<configuration>
							<instructions>
								<Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>
								<Bundle-Version>${project.version}</Bundle-Version>
								
								<!-- 
									to dependencies be avaible for osgi classloader
								 -->
								
                                <Export-Package>*</Export-Package>
                                <Private-Package>javax.jws.*</Private-Package>
                                <DynamicImport-Package>javax.*, org.*</DynamicImport-Package>
                                <Bundle-ClassPath>., WEB-INF/classes</Bundle-ClassPath>
                                <Embed-Directory>WEB-INF/lib</Embed-Directory>
                                <Embed-Dependency>*;scope=compile|runtime</Embed-Dependency>
                                <Embed-Transitive>true</Embed-Transitive>
                                <Import-Package> 
                                    !com.google.inject, 
                                    !com.google.inject.binder, 
                                    !com.google.inject.util,
                                    !com.opensymphony.webwork.dispatcher,
                                    !com.opensymphony.webwork.dispatcher.mapper,
                                    !com.opensymphony.xwork,
                                    !com.opensymphony.xwork.config,
                                    !com.opensymphony.xwork.util,
                                    !javax.faces,
                                    !javax.faces.application,
                                    !javax.faces.context,
                                    !javax.faces.el,
                                    !javax.faces.lifecycle,
                                    !javax.portlet,
                                    !net.sf.hibernate,
                                    !nu.xom,
                                    !org.apache.bsf,
                                    
                                    !org.apache.commons.io,
                                    !org.apache.commons.io.output,
                                    
                                    !org.apache.log,
                                    
                                    !org.apache.struts.action,
                                    !org.apache.struts.config,
                                    !org.apache.struts.util,
                                    !org.hibernate,
                                    !org.hibernate.classic,
                                    !org.hibernate.engine,
                                    !org.hibernate.proxy,
                                    !org.springframework.*,
                                    javax.servlet, javax.servlet.http, !javax.jws, * </Import-Package>
								
							</instructions>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<supportedProjectTypes>
						<supportedProjectType>jar</supportedProjectType>
						<supportedProjectType>bundle</supportedProjectType>
						<supportedProjectType>war</supportedProjectType>
					</supportedProjectTypes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven-war-plugin.version}</version>
				<configuration>
					<archive>
						<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
					</archive>
				</configuration>
			</plugin>

			<!-- test tooling -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin-version}</version>
				<configuration>
					<testFailureIgnore>true</testFailureIgnore>
					<failIfNoTests>false</failIfNoTests>
					<!-- for future projects based on this one... 
		          	<suiteXmlFiles>
            			<suiteXmlFile>src/test/resources/FZLBPMS_ExampleTest.xml</suiteXmlFile>
          			</suiteXmlFiles>
          			 -->					
				</configuration>
			</plugin>

			<!-- webcontainer -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>maven-jetty-plugin</artifactId>
				<version>${jetty.version}</version>
				<configuration>
					<scanIntervalSeconds>10</scanIntervalSeconds>
					<stopKey>foo</stopKey>
					<stopPort>9999</stopPort>
				</configuration>
				<executions>
					<execution>
						<id>start-jetty</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<scanIntervalSeconds>0</scanIntervalSeconds>
							<daemon>true</daemon>
						</configuration>
					</execution>
					<execution>
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		
			<!-- testng requires at least 1.5 -->
			<plugin>
        		<groupId>org.apache.maven.plugins</groupId>
        		<artifactId>maven-compiler-plugin</artifactId>
        		<version>2.5.1</version>
        		<configuration>
          			<source>1.6</source>
          			<target>1.6</target>
        		</configuration>
      		</plugin>
		</plugins>
		
		
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											wagon-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-beta-4,)
										</versionRange>
										<goals>
											<goal>download-single</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
	
	
			
	<!--
	<scm>
		<connection>scm:svn:http://somerepository.com/svn_repo/trunk</connection>
		https://github.com/ops4j/org.ops4j.pax.web.git
		<developerConnection>scm:svn:https://somerepository.com/svn_repo/trunk</developerConnection>
		<url>http://somerepository.com/view.cvs</url>
	</scm>
	-->
</project>
